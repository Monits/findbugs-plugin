<?xml version="1.0" encoding="UTF-8"?>
<MessageCollection xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="messagecollection.xsd">

  <Plugin>
    <ShortDescription>Works Applications Findbugs plugin</ShortDescription>
    <Details>This plugin provides detector for some common bugs</Details>
  </Plugin>

  <Detector class="jp.co.worksap.oss.findbugs.ForbiddenSystemClass">
    <Details>
      we can not use System.out and System.err, please use log to output
      information
    </Details>
  </Detector>

  <BugPattern type="FORBIDDEN_SYSTEM">
    <ShortDescription>code for publish can not use System.out
    </ShortDescription>
    <LongDescription>we can not use System.out and System.err, please use log to
      output information
    </LongDescription>
    <Details>
  <![CDATA[
    <p>System.out and System.err are forbidden, please use log</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jsr305.BrokenImmutableClassDetector">
    <Details>
      To ensure immutability, class which is annotated with @Immutable should be final.
      And all field in this class should be final too.
    </Details>
  </Detector>

  <BugPattern type="IMMUTABLE_CLASS_SHOULD_BE_FINAL">
    <ShortDescription>Immutable class should be final.
    </ShortDescription>
    <LongDescription>To prevent from bad extending, immutable class should be final.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>To prevent from bad extending, immutable class should be final.</p>
  ]]>
    </Details>
  </BugPattern>

  <BugPattern type="BROKEN_IMMUTABILITY">
    <ShortDescription>Field of immutable class should be final.
    </ShortDescription>
    <LongDescription>
      Field ({1}) in class ({2}) should be final to make a class ({3}) immutable.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Field of immutable class should be final.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jsr305.nullness.UnknownNullnessDetector">
    <Details>
      It is good to explain nullness of argument and returned value to help FindBugs detects potential problem.
    </Details>
  </Detector>

  <BugPattern type="UNKNOWN_NULLNESS_OF_PARAMETER">
    <ShortDescription>Nullness of this parameter is unknown.
    </ShortDescription>
    <LongDescription>Nullness of parameter in method {1.name} of class {0} is unknown.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Nullness of this parameter is unknown.</p>
  ]]>
    </Details>
  </BugPattern>

  <BugPattern type="UNKNOWN_NULLNESS_OF_RETURNED_VALUE">
    <ShortDescription>Nullness of this returned value is unknown.
    </ShortDescription>
    <LongDescription>
      Nullness of returned value in method {1.name} of class {0} is unknown.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Nullness of this returned value is unknown.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.LongIndexNameDetector">
    <Details>
      Oracle database has limitation for length of index name.
      We have to care this limitation when we make index.
    </Details>
  </Detector>

  <BugPattern type="LONG_INDEX_NAME">
    <ShortDescription>Index name should be shorter than or equal to 30 bytes.
    </ShortDescription>
    <LongDescription>
      Index name should be shorter than or equal to 30 bytes.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Index name should be shorter than or equal to 30 bytes.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.LongTableNameDetector">
    <Details>
      Oracle database has limitation for length of table name.
      We have to care this limitation when we make entity.
    </Details>
  </Detector>

  <BugPattern type="LONG_TABLE_NAME">
    <ShortDescription>Table name should be shorter than or equal to 30 bytes.
    </ShortDescription>
    <LongDescription>
      Table name should be shorter than or equal to 30 bytes.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Table name should be shorter than or equal to 30 bytes.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.LongColumnNameDetector">
    <Details>
      Oracle database has limitation for length of column name.
      We have to care this limitation when we make entity.
    </Details>
  </Detector>

  <BugPattern type="LONG_COLUMN_NAME">
    <ShortDescription>Column name should be shorter than or equal to 30 bytes.
    </ShortDescription>
    <LongDescription>
      Column name should be shorter than or equal to 30 bytes.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Column name should be shorter than or equal to 30 bytes.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.ImplicitLengthDetector">
    <Details>
      The default value of length element (255) might be not enough in some case.
      It is good to specify the value of length element clear, it tells that you have considered about it.
    </Details>
  </Detector>

  <BugPattern type="IMPLICIT_LENGTH">
    <ShortDescription>Specify length of column, its default (255) might be not enough.
    </ShortDescription>
    <LongDescription>
      Specify length of column defined by {1.name}, its default (255) might be not enough.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Specify length of column, its default (255) might be not enough.</p>
  ]]>
    </Details>
  </BugPattern>

  <BugPattern type="ILLEGAL_LENGTH">
    <ShortDescription>Specified length of column should be greater than 0, and smaller than 4,000 bytes.
    </ShortDescription>
    <LongDescription>
      Specified length of column ({1}) should be greater than 0, and smaller than 4,000 bytes.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Specified length of column should be greater than 0, and smaller than 4,000 bytes.</p>
    <p>Oracle&#39;s maximum varchar size is 4000 bytes, and DB2&#39;s is 32704 bytes.
    To keep portability of your product, it is better to shorten length to 4000 bytes, or to use @Lob annotation to use CLOB.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.ImplicitNullnessDetector">
    <Details>
      It is good to specify the value of nullable element clear, it tells that you have considered about it.
    </Details>
  </Detector>

  <BugPattern type="IMPLICIT_NULLNESS">
    <ShortDescription>It is good to specify the value of nullable element clear, it tells that you have considered about it.
    </ShortDescription>
    <LongDescription>
      It is good to specify the value of nullable element clear, it tells that you have considered about it.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>It is good to specify the value of nullable element clear, it tells that you have considered about it.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.ColumnDefinitionDetector">
    <Details>
      To ensure that JPA entity does not depend on specific RDBMS,
      it is good to check existence of columnDefinition property.
    </Details>
  </Detector>

  <BugPattern type="USE_COLUMN_DEFINITION">
    <ShortDescription>@Column annotation has columnDefinition property.
    </ShortDescription>
    <LongDescription>
      @Column annotation has columnDefinition property on {1.name}, it might break RDBMS portability.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>@Column annotation has columnDefinition property, it might break RDBMS portability.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.jpa.NullablePrimitiveDetector">
    <Details>
      This detector will find illegal nullable property of primitive type.
      When developer changes type of field from primitive type to reference type (ex. from int to Integer),
      he/she might forget to care about this property. This detector helps developer to find this human-error.
    </Details>
  </Detector>

  <BugPattern type="NULLABLE_PRIMITIVE">
    <ShortDescription>Nullable property of primitive type should be false.
    </ShortDescription>
    <LongDescription>
      Nullable property of primitive type should be false.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Nullable property of primitive type should be false.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.junit.UndocumentedIgnoreDetector">
    <Details>
      This detector will find ignored test case which has no explanation about why it is ignored.
    </Details>
  </Detector>

  <BugPattern type="UNDOCUMENTED_IGNORE">
    <ShortDescription>To tell why test case is ignored, put explanation as a parameter.
    </ShortDescription>
    <LongDescription>
      To tell why test case is ignored, put explanation as a parameter.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>To tell why test case is ignored, put explanation as a parameter.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.guava.UnexpectedAccessDetector">
    <Details>
    </Details>
  </Detector>

  <BugPattern type="GUAVA_UNEXPECTED_ACCESS_TO_VISIBLE_FOR_TESTING">
    <ShortDescription>
      You cannot access to package-private method which is annotated by @VisibleForTesting.
    </ShortDescription>
    <LongDescription>
      You cannot access to package-private method which is annotated by @VisibleForTesting.
      This annotation means that visibility was widened only for test code, so your implementation code
      shouldn't access to method which is annotated by this annotation.
    </LongDescription>
    <Details>
  <![CDATA[
      <p>You cannot access to package-private method which is annotated by @VisibleForTesting.</p>
      <p>This annotation means that visibility was widened only for test code, so your implementation code
      shouldn't access to method which is annotated by this annotation.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="jp.co.worksap.oss.findbugs.findbugs.UndocumentedSuppressFBWarningsDetector">
    <Details>
      This detector will find suppressed FindBugs warning which has no justification about why it is suppressed.
    </Details>
  </Detector>

  <BugPattern type="FINDBUGS_UNDOCUMENTED_SUPPRESS_WARNINGS">
    <ShortDescription>To tell why this FindBugs warning is suppressed, put justification as a parameter.
    </ShortDescription>
    <LongDescription>
      To tell why this FindBugs warning is suppressed, put justification as a parameter.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>To tell why this FindBugs warning is suppressed, put justification as a parameter.</p>
  ]]>
    </Details>
  </BugPattern>
  
  <Detector class="com.monits.findbugs.effectivejava.ToStringDetector">
    <Details>
      This detector will look for classes missing proper toString overrides, or missing fields in toString.
    </Details>
  </Detector>

  <BugPattern type="MISSING_FIELD_IN_TO_STRING">
    <ShortDescription>All non-static and meaningfull fields should be included in toString.
    </ShortDescription>
    <LongDescription>
      The field {1.name} is not included in the current toString implementation.
      Having a meaningful and complete toString will help developers debug code, by providing more meaningful
      inspections out of the box. For more information, refer to Effective Java, item 10.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>All non-static and meaningfull fields should be included in toString.</p>
  ]]>
    </Details>
  </BugPattern>
  
  <BugPattern type="MISSING_TO_STRING_OVERRIDE">
    <ShortDescription>All classes with an internal state should provide a meaningful toString for debug purpouses.
    </ShortDescription>
    <LongDescription>
      The class {0} has an internal state and should therefore override toString.
      Having a meaningful and complete toString will help developers debug code, by providing more meaningful
      inspections out of the box. For more information, refer to Effective Java, item 10.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>All classes with an internal state should provide a meaningful toString for debug purpouses.</p>
  ]]>
    </Details>
  </BugPattern>
  
  <Detector class="com.monits.findbugs.effectivejava.EqualsOverrideDetector">
    <Details>
      This detector will look for classes overriding equals from a super-class.
    </Details>
  </Detector>
  
  <BugPattern type="DONT_OVERRIDE_EQUALS">
    <ShortDescription>You must not override equals if already defined by another class up in the hierarchy.
    </ShortDescription>
    <LongDescription>
      The class {0} overrides equals, which was already defined by {1}.
      Doing this breaks the general contract for equals, since symmetry will be lost.
      For more information, refer to Effective Java, item 8.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>You must not override equals if already defined by another class up in the hierarchy.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="com.monits.findbugs.jdk.InconsistentHashCodeEqualsDetector">
    <Details>
      This detector will look for classes whose equals and hashCode methods' uses distinct fields from one another.
    </Details>
  </Detector>

  <BugPattern type="HASHCHODE_HAS_MORE_FIELDS_THAN_EQUALS">
    <ShortDescription>Your implementation of hashCode method is using more or distinct fields than the equals method.
    </ShortDescription>
    <LongDescription>
      The class {0} violates the general contract for Object.hashCode(). Quoting the Javadoc:
      "If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result."
      Using more fields to compute the hash code than for equals, allows for two instances to be equal, yet have different hash codes.
      Add {2} to equals, or remove it from hashCode to prevent this error.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Your implementation of hashCode method is using more or distinct fields than the equals method.</p>
  ]]>
    </Details>
  </BugPattern>

  <BugPattern type="EQUALS_HAS_MORE_FIELDS_THAN_HASHCODE">
    <ShortDescription>Your implementation of equals method is using more or distinct fields than the hashCode method.
    </ShortDescription>
    <LongDescription>
      The class {0} uses more fields in equals than for hash codes.
      Even though this is not strictly an error, it does generate hash code collisions for objects that are not equal, and is therefore not an optimum implementation.
      Consider adding missing field {2} to hashCode to prevent this.
    </LongDescription>
    <Details>
  <![CDATA[
    <p>Your implementation of equals method is using more or distinct fields than the hashCode method.</p>
  ]]>
    </Details>
  </BugPattern>

  <Detector class="com.monits.findbugs.jdk.UselessValueOfCallDetector">
    <Details>
      This detector will look for useless uses of ValueOf calls.
    </Details>
  </Detector>
  <BugPattern type="USELESS_VALUEOF_CALL">
    <ShortDescription>
      It is unnecessary to do valueOf when you try to return the same Type of the argument given.
    </ShortDescription>
    <LongDescription>
        Unnecessary call of valueOf in method {1.name} of class {0}.
        The autoboxing of the argument given and the result of calling valueOf return the same value.
     </LongDescription>
    <Details>
  <![CDATA[
    <p>It is unnecessary to do valueOf when you try to return the same Type of the argument given.</p>
  ]]>
    </Details>
  </BugPattern>

  <BugCode abbrev="JDK">JDK</BugCode>
  <BugCode abbrev="SYS">SYS</BugCode>
  <BugCode abbrev="JSR305">JSR305</BugCode>
  <BugCode abbrev="JPA">JPA</BugCode>
  <BugCode abbrev="JUNIT">JUnit</BugCode>
  <BugCode abbrev="GUAVA">Google Guava</BugCode>
  <BugCode abbrev="FINDBUGS">FindBugs</BugCode>
  <BugCode abbrev="EFFECTIVE">Effective Java</BugCode>
</MessageCollection>